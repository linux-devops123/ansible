def db = "database-1"
def serverip1 = "13.234.250.50"
def serverip2 = "3.111.236.41"
node('built-in'){
 stage('parameters'){
 properties([
 parameters([
            choice(choices:['1','2','3'],description:'duration to run',name:'jenkins_pipeline')
        ])
        ])
        }
    stage('Cleanup and clone'){
           
            deleteDir()
             git branch:'main', url: 'https://github.com/linux-devops123/ansible.git', credentialsId:'jenkins-git-integration'
            echo "done"
            script{
                    duration="${params.jenkins_pipeline}"
                 }
           
        
        }
        //for this pipeline first run packer pipeline and then cloudformation pipline
        withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_jenkins',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'

                ]]){

          stage("start rds database")
        {
                script{
                   
                    
                    def dbstatus = sh(returnStdout:true, script:"aws rds describe-db-instances --db-instance-identifier ${db} --query 'DBInstances[].DBInstanceStatus[]' --output text")
                    echo "${dbstatus}".trim();
                    if("${dbstatus}".trim() == "stopped")
                    {
                     def rds= sh(returnstdout:true,script:"aws rds start-db-instance --db-instance-identifier database-1")
                    echo "${rds}"
                    sleep(600);
                   }
                    def endpoint = sh(returnStdout:true, script: "aws rds describe-db-instances --query 'DBInstances[*].Endpoint.Address'")
                    echo "${endpoint}".trim();
                   
                }
            
        }
        
         stage("Ansible start servers"){            
             dir('ansible')
            {
               ansiblePlaybook(colorized:true,inventory:'hosts/inventory.ini',playbook:'EC2-Instances/start.yaml',
                    extraVars:["instanceid_1":"i-0bf980f01fc42a467", "instanceid_2":"i-061774f5416697840"],credentialsId:'aws_jenkins',extras:"--verbose -vvv -e buildVersion='1' -e deployEnvironment='staging' -e gitBranch='1'")
                    sleep(100);
            }
        }
        
        stage("run exe by Ansible"){
      
            
            dir('ansible'){
            
                    ansiblePlaybook(colorized:true,inventory:'hosts/inventory.ini',playbook:'WindowsServer/files.yaml',extraVars:["exe":"C:\\app\\WebApplication-ASP.NETCOREMVC\\bin\\Debug\\net5.0\\WebApplication-ASP.NETCOREMVC.exe","path":"C:\\data.txt","serverip":"${serverip1}"],extras:"--verbose -vvv -e buildVersion='1' -e deployEnvironment='staging' -e gitBranch='1'")
                
            }
            
             dir('ansible'){
                    ansiblePlaybook(colorized:true,inventory:'hosts/inventory.ini',playbook:'WindowsServer/files.yaml',extraVars:["exe":"C:\\app\\WebApplication-ASP.NETCOREMVC\\bin\\Debug\\net5.0\\WebApplication-ASP.NETCOREMVC.exe","path":"C:\\data.txt","serverip":"${serverip2}"],extras:"--verbose -vvv -e buildVersion='1' -e deployEnvironment='staging' -e gitBranch='1'")
                
            }
            
        }
        
        stage('create ec2 instance through ansible')
        {
            dir('ansible'){
         ansiblePlaybook(colorized:true,inventory:'hosts/inventory.ini',playbook:'AWSInfrastructureAnsible/ec2-ansible.yaml', credentialsId:'aws_jenkins',extras:"--verbose -vvv -e buildVersion='1' -e deployEnvironment='staging' -e gitBranch='1'")
         sleep(100);
            }
        }
        stage('copy jenkins file to s3')
        {
            dir('ansible'){
          ansiblePlaybook(colorized:true,inventory:'hosts/inventory.ini',playbook:'AWSInfrastructureAnsible/s3.yaml', credentialsId:'aws_jenkins',extras:"--verbose -vvv -e buildVersion='1' -e deployEnvironment='staging' -e gitBranch='1'")
         sleep(100);
            }
        }         
        

        stage('ansible+terraform')
        {
          dir('ansible/terraform/ubuntu')
            {
                
                    sh"""
                    terraform init
                    terraform apply -auto-approve

                    """
                
                
            }
             dir('ansible/terraform/windows')
            {
                
                    sh"""
                    terraform init
                    terraform apply -auto-approve

                    """
                 
                
            }
         }

          stage('sleep')
        {
           def time=duration.toInteger()*60+360
           sleep("${time}");
        }

         stage("destroy servers")
        {
             dir('ansible/terraform/ubuntu')
            {
               
                    sh"""
                    terraform init
                    terraform destroy -auto-approve

                    """
                    
                
            }
             dir('ansible/terraform/windows')
            {
                
                    sh"""
                    terraform init
                    terraform destroy -auto-approve

                    """
                  
            }
        }

        stage('restart servers through ansible')
        {
            dir('ansible'){     
            ansiblePlaybook(colorized:true,inventory:'hosts/inventory.ini',playbook:'EC2-Instances/restart.yaml',
                    extraVars:["instanceid_1":"i-0bf980f01fc42a467", "instanceid_2":"i-061774f5416697840"],credentialsId:'aws_jenkins',extras:"--verbose -vvv -e buildVersion='1' -e deployEnvironment='staging' -e gitBranch='1'") 
            }
        }
        stage('stop servers through ansible')
        {
            dir('ansible'){    
          ansiblePlaybook(colorized:true,inventory:'hosts/inventory.ini',playbook:'EC2-Instances/stop.yaml',
                    extraVars:["instanceid_2":"i-0bf980f01fc42a467", "instanceid_2":"i-061774f5416697840"],credentialsId:'aws_jenkins',extras:"--verbose -vvv -e buildVersion='1' -e deployEnvironment='staging' -e gitBranch='1'") 
                    sleep(100);
            }
        }

          stage("stop rds database")
        {
                script{
                    
                    def dbstatus = sh(returnStdout:true, script:"aws rds describe-db-instances --db-instance-identifier ${db} --query 'DBInstances[].DBInstanceStatus[]' --output text")
                    echo "${dbstatus}".trim();
                    if("${dbstatus}".trim() == "available")
                    {
                     def rds= sh(returnstdout:true,script:"aws rds stop-db-instance --db-instance-identifier database-1")
                    echo "${rds}"
                    }
                    def endpoint = sh(returnStdout:true, script: "aws rds describe-db-instances --query 'DBInstances[*].Endpoint.Address'")
                    echo "${endpoint}".trim();
                    sleep(100);
                }
            
        }
        
    }
            
}






